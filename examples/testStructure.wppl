var roundTo = function(n, mult) {
    return mult * Math.round(n / mult);
};

var discretizeBeta = function(bd, binWidth, nSamples, keepZeros) {
    return Infer({method: 'rejection', samples: nSamples}, function() {
        var samp = sample(bd);
        var rounded = roundTo(samp, binWidth);
        if (!keepZeros) {
            // For structural weights, it doesn't make sense to have 0
            // probabilities
            condition(rounded !== 0);
        }
        return rounded;
    });
};

var dir1 = {bright: ['hot'], hot: [], on: []};
var dir2 = {bright: [], hot: ['bright'], on: []};
// var jpds1 = enumerateJPD(dir1);
// var jpds2 = enumerateJPD(dir2);
var dag1 = DAG(dir1, 'null');
console.log('hello');
var dag2 = DAG(dir2, 'null');

var arraysEqual = function(as,bs) {
    return as.length === bs.length &&
        all(idF, map2(function(a, b) { return a === b; }, as, bs));
};

var mean = function(xs) {
    return expectation(Enumerate(function() {
        return uniformDraw(xs);
    }));
};

// What is the average probability of rows? Get only the rows of interest
// For each JPD return the row if it exists else null
var rowOfInterest = [true, true, false];

var jpdToString = function(jpd) {
    return reduce(function(row, acc) {
        var thisRowStr = row[0].join(',') + ': ' + row[1].toFixed(4);
        return acc + '\n' + thisRowStr;
    }, '', jpd) + '\n';
};

