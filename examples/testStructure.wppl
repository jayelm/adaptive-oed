var roundTo = function(n, mult) {
    return mult * Math.round(n / mult);
};

var discretizeBeta = function(bd, binWidth, nSamples, keepZeros) {
    return Infer({method: 'rejection', samples: nSamples}, function() {
        var samp = sample(bd);
        var rounded = roundTo(samp, binWidth);
        if (!keepZeros) {
            // For structural weights, it doesn't make sense to have 0
            // probabilities
            condition(rounded !== 0);
        }
        return rounded;
    });
};

var aList = {bright: [], hot: [], on: ['bright', 'hot']};
var jpds = enumerateJPD(aList);
var dag = DAG(aList, 'null');

var arraysEqual = function(as,bs) {
    return as.length === bs.length &&
        all(idF, map2(function(a, b) { return a === b; }, as, bs));
};

var mean = function(xs) {
    return expectation(Enumerate(function() {
        return uniformDraw(xs);
    }));
};

// What is the average probability of rows? Get only the rows of interest
// For each JPD return the row if it exists else null
var rowOfInterest = [false, false, false];
var probs = pam(jpds.support(), function(jpd) {
    var maybeRow = reduce(function(row, maybe) {
        return (arraysEqual(row[0], rowOfInterest)) ?
            row[1] : maybe;
    }, null, jpd);
    return (maybeRow === null) ? 0 : maybeRow;
});

var marginals = pam(jpds.support(), function(jpd) {
    return marginal(jpd, {bright: 0, hot: 1, on: 2}, 'bright');
});

var conditionals = pam(jpds.support(), function(jpd) {
    return conditional(jpd, {bright: 0, hot: 1, on: 2}, 'on', {hot: true});
});
console.log(conditionals);

// mean(probs);
// mean(marginals);
mean(conditionals);

var probs = discretizeBeta(Beta({a: 1, b: 1}), binWidth, 100000, true);

pam(probs.support(), function(p) {
    var score = dag({type: 'conditional', a: 'bright', cond: {hot: true}}, {y: p, name: p.toString()});
    console.log(p, Math.exp(score));
    return [p, Math.exp(score)];
})


var score1 = dag({type: 'marginal', a: 'bright'}, {y: 0.000001, name: '0.2'});
var score2 = dag({type: 'marginal', a: 'bright'}, {y: 0.2, name: '0.2'});
var score3 = dag({type: 'marginal', a: 'bright'}, {y: 0.4, name: '1'});
var score4 = dag({type: 'marginal', a: 'bright'}, {y: 0.6, name: '1'});
var score5 = dag({type: 'marginal', a: 'bright'}, {y: 0.8, name: '1'});
var score6 = dag({type: 'marginal', a: 'bright'}, {y: 0.999999, name: '1'});

// var score3 = dag({type: 'conditional', a: 'bright', cond: {hot: true}}, {y: 1.0, name: '1.0'});
// var score4 = dag({type: 'conditional', a: 'bright', cond: {hot: true}}, {y: 0.0, name: '0.0'});
console.log(score1, score2, score3, score4, score5, score6);
// console.log(score3, score4);
// console.log('done');
// console.log(Math.exp(score1), Math.exp(score2), Math.exp(score3));
